Claro! Criar uma API REST em Go envolve o uso de um framework ou biblioteca para facilitar o roteamento, manipulação de solicitações HTTP, entre outras funcionalidades. Um dos frameworks populares em Go para criar APIs RESTful é o gin.

Se você não tem o gin instalado, você pode fazê-lo usando o seguinte comando:

bash
Copy code
go get -u github.com/gin-gonic/gin
Aqui está um exemplo simples de como você pode criar uma API REST básica usando o gin:

go
Copy code
package main

import (
	"github.com/gin-gonic/gin"
	"net/http"
)

func main() {
	// Cria uma instância do gin
	r := gin.Default()

	// Rota GET para a raiz da API
	r.GET("/", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"mensagem": "Bem-vindo à minha primeira API REST com Go!",
		})
	})

	// Rota GET para /users
	r.GET("/users", func(c *gin.Context) {
		// Suponhamos que temos uma lista de usuários
		users := []string{"Alice", "Bob", "Charlie"}

		// Retorna a lista de usuários como JSON
		c.JSON(http.StatusOK, gin.H{
			"users": users,
		})
	})

	// Rota POST para /users
	r.POST("/users", func(c *gin.Context) {
		// Suponhamos que recebemos um novo usuário no corpo da solicitação
		var newUser struct {
			Name string `json:"name"`
		}

		// Faz o bind do corpo da solicitação para a struct newUser
		if err := c.BindJSON(&newUser); err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"erro": err.Error()})
			return
		}

		// Adiciona o novo usuário à lista (simulado)
		// Aqui você pode adicionar o novo usuário a um banco de dados ou armazenamento
		// Para este exemplo, apenas imprimimos o nome do novo usuário
		users = append(users, newUser.Name)

		c.JSON(http.StatusCreated, gin.H{"mensagem": "Novo usuário adicionado com sucesso"})
	})

	// Inicia o servidor na porta 8080
	r.Run(":8080")
}
Este exemplo cria uma API REST com duas rotas principais:

GET / - Retorna uma mensagem de boas-vindas.
GET /users - Retorna uma lista de usuários.
POST /users - Adiciona um novo usuário à lista de usuários (simulado para este exemplo).
